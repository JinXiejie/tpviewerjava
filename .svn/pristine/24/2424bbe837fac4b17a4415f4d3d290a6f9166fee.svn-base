/**
 * Copyright (C) 2011 Guangzhou JHComn Technologies Ltd.
 *
 * 本代码版权归广州佳和立创科技发展有限公司所有，且受到相关的法律保护。
 * 没有经过版权所有者的书面同意，
 * 任何其他个人或组织均不得以任何形式将本文件或本文件的部分代码用于其他商业用途。
 *
 */
package com.mip.tp.image;

import java.awt.Color;
import java.awt.FontMetrics;
import java.awt.Graphics2D;
import java.awt.RenderingHints;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
import java.text.NumberFormat;

import javax.imageio.ImageIO;

import com.mip.tp.data.ViewObject;
import com.mip.tp.data.partdischarge.PDViewObject;
import com.mip.tp.util.ImageUtil;

/**
 * 局放PRPS类型图谱文件图片生成器
 * @author longyz
 * @date 2012-4-21
 */
public class PDPrpsImageGenerator implements ImageGenerator {

	private static final int DEFAULT_WIDTH = 1200;//默认宽度
	private static final int DEFAULT_HEIGHT = 800;//默认高度
	private static final int DEFAULT_X_PADDING = 400;//默认高度
	private static final int DEFAULT_Y_PADDING = 300;//默认高度
	private static final int DEFAULT_X_SEPARATECOUNT = 4;//x轴份数
	private static final int DEFAULT_Y_SEPARATECOUNT = 8;//y轴份数
	private static final int DEFAULT_Z_SEPARATECOUNT = 10;//z轴份数
	private static final Color DEFAULT_BG_COLOR = new Color(0,0x99,0x44);//背景色
	
	private String title;
	
	private Color bgColor = DEFAULT_BG_COLOR;
	private int width = DEFAULT_WIDTH;
	private int height = DEFAULT_HEIGHT;
	private int zheight = 150;
	private PDViewObject vo;
	
	private double xSeparateCount = DEFAULT_X_SEPARATECOUNT;//x轴分隔份数
	private double ySeparateCount = DEFAULT_Y_SEPARATECOUNT;//x轴分隔份数
	private double zSeparateCount = DEFAULT_Z_SEPARATECOUNT;//x轴分隔份数
	private double xSeparate;//x轴分隔宽度
	private double ySeparate;//y轴分隔高度
	private double zSeparate;//z轴分隔高度
	private double xRealSeparate;//x轴分隔实际宽度
	private double yRealSeparate;//y轴分隔实际高度
	
	private double xScale;//x轴比例尺
	private double yScale;//x轴比例尺
	private double zScale;//z轴比例尺
	
	private int xPadding = DEFAULT_X_PADDING;//x轴间隙
	private int yPadding = DEFAULT_Y_PADDING;//y轴间隙
	
	private double xOffset2center;//y轴居中的偏移量
	private double yOffset2center;//y轴居中的偏移量
	
	private double maxYCoordinate_yScale;//y轴最大值转换为坐标系后的值
	
	private static final Color LINEBARBEGINCOLOR = new Color(0xFF,0x00,0x00);
	private static final Color LINEBARENDCOLOR = new Color(0xFF,0xFB,0x00);
	private static final int LINEBAR_WIDTH = 10;
	private static final int LINEBAR_HEIGHT = 100;
	private double linebar_scale;
	
	private Graphics2D g2d;
	private BufferedImage bi;
	
	private static final NumberFormat numberFormat = NumberFormat.getNumberInstance(java.util.Locale.CHINA);
	static{
		numberFormat.setMaximumFractionDigits(2);     //两位小数
	}
	
	public PDPrpsImageGenerator(){}
	
	public PDPrpsImageGenerator(int width,int height) throws ImageGeneratorException{
		if(width < 0 || height < 0){
			throw new ImageGeneratorException("width和 hegiht不能小于0");
		}
		this.width = width;
		this.height = height;
	}
	
	/* (non-Javadoc)
	 * @see com.mip.tp.image.ImageGenerator#generate(com.mip.tp.data.ViewObject)
	 */
	@Override
	public String generate(ViewObject vo,String saveImagePath) throws ImageGeneratorException {
		if(!(vo instanceof PDViewObject)){
			throw new ImageGeneratorException("vo不是PDViewObject的对象");
		}
		this.vo = (PDViewObject)vo;
		initGenerator();
		
		//背景色
        drawBG();
        
        
        g2d.translate(xOffset2center-150, yOffset2center+200);//平移坐标,使所有坐标居中
        paint(-10,-300,LINEBAR_WIDTH,LINEBAR_HEIGHT,LINEBARBEGINCOLOR,LINEBARENDCOLOR);
        drawTitle();
        drawXAxis();
        drawYAxis();
        
        drawViewObject();
        release();
        
        try {
        	if(saveImagePath != null){
        		ImageIO.write(bi, "png", new File(saveImagePath));
        	}
			return ImageUtil.convert2Base64(bi);
		} catch (IOException e) {
			e.printStackTrace();
			throw new ImageGeneratorException("图片生成失败",e);
		}
	}

	

	/**
	 * 初始化生成器
	 * @param cbvo
	 */
	private void initGenerator(){
		initGraphics();
		initProperties();
	}
	
	/**
	 * 初始化画笔
	 */
	private void initGraphics(){
//		BufferedImage bi = new BufferedImage(width, height, BufferedImage.TYPE_4BYTE_ABGR);
		bi = new BufferedImage(width, height, BufferedImage.TYPE_INT_RGB);
		
		g2d = bi.createGraphics();
		g2d.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);
        g2d.setRenderingHint(RenderingHints.KEY_DITHERING, RenderingHints.VALUE_DITHER_ENABLE);
        
	}
	
	/**
	 * 初始化属性
	 */
	private void initProperties(){
		xScale = (width-xPadding*2)/(vo.maxXCoordinate - vo.minXCoordinate);//x轴比例尺
        yScale = (height-yPadding*2)/(vo.maxYCoordinate - vo.minYCoordinate);//y轴比例尺
        zScale = (zheight)/(vo.maxZCoordinate - vo.minZCoordinate);//z轴比例尺
        
        ySeparateCount = vo.maxYCoordinate/10;
        xSeparate = (width-xPadding*2)/xSeparateCount;//等高线间距
        ySeparate = (height-yPadding*2)/ySeparateCount;//等高线间距
        zSeparate = (zheight)/zSeparateCount;//等高线间距
        xRealSeparate = xSeparate/xScale;//实际比例
        yRealSeparate = ySeparate/yScale;//实际比例
        
        xOffset2center = xPadding;
        yOffset2center = yPadding;
        
        maxYCoordinate_yScale = vo.maxYCoordinate*yScale;
        
        linebar_scale = LINEBAR_HEIGHT/vo.maxZCoordinate;
	}
	
	private void drawBG(){
		g2d.setColor(bgColor);
        g2d.fillRect(0, 0, width, height);
	}
	
	private void drawTitle(){
		title = "PRPS";
		g2d.setColor(Color.BLACK);
		g2d.drawString(title, 10, -100-caculateZCoordinate(vo.maxZCoordinate));
	}
	
	/**
	 * 绘制x轴坐标
	 */
	private void drawXAxis(){
		double linex = 0;
		double lineyMax = vo.maxYCoordinate;
		
		FontMetrics fm = g2d.getFontMetrics();//将要用到的FontMetrics类
		String str = null;
		int stringWidth;
		int avgX = (int)(360/xSeparateCount);
		g2d.setColor(Color.BLACK);
		g2d.drawString("相位(º)", caculateXCoordinate(vo.maxXCoordinate/2, vo.maxYCoordinate), caculateYCoordinate(vo.maxXCoordinate/2-10, vo.maxYCoordinate));
		g2d.setColor(new Color(0xBB,0xCC,0xDD));
        for(int i=0;i<xSeparateCount+1;i++){
        	linex = xRealSeparate * i;
        	int temp_x1 = caculateXCoordinate(linex,0);
        	int temp_y1 = caculateYCoordinate(linex,0);
        	int temp_x2 = caculateXCoordinate(linex,lineyMax);
        	int temp_y2 = caculateYCoordinate(linex,lineyMax);
        	g2d.drawLine(temp_x1, temp_y1, temp_x2, temp_y2);
        	//画z轴
        	g2d.drawLine(temp_x1, temp_y1, temp_x1, temp_y1 - caculateZCoordinate(vo.maxZCoordinate));
//        	str = numberFormat.format(xRealSeparate*i);
        	str = numberFormat.format(avgX*i);
        	stringWidth = fm.stringWidth(str);
        	g2d.drawString(str, caculateXCoordinate(linex,lineyMax+3), caculateYCoordinate(linex,lineyMax+3));
        }
	}
	
	/**
	 * 绘制y轴坐标及等高线
	 */
	private void drawYAxis(){
		//绘制等高线
        double linex1 = 0;
        double liney = 0;
        double linex2 = vo.maxXCoordinate;
        FontMetrics fm = g2d.getFontMetrics();//将要用到的FontMetrics类
        String str = null;
        g2d.setColor(Color.BLACK);
        g2d.drawString("工频周期数", caculateYCoordinate(-10, vo.maxYCoordinate/2), caculateYCoordinate(-10, vo.maxYCoordinate/2));
        g2d.setColor(new Color(255,255,255));
        for(int i=0;i<ySeparateCount+1;i++){
        	liney = yRealSeparate * i;
        	if(i==0){
        		//画z轴
        		g2d.drawLine(caculateXCoordinate(linex1, liney), caculateYCoordinate(linex1, liney)-caculateZCoordinate(vo.maxZCoordinate), caculateXCoordinate(linex2, liney), caculateYCoordinate(linex2, liney)-caculateZCoordinate(vo.maxZCoordinate));
        		g2d.drawString(""+(int)vo.maxZCoordinate+"hBm", caculateXCoordinate(linex1, liney)-40, caculateYCoordinate(linex1, liney)-caculateZCoordinate(vo.maxZCoordinate));
        	}
        	g2d.drawLine((int)caculateXCoordinate(linex1, liney), caculateYCoordinate(linex1, liney), caculateXCoordinate(linex2, liney), caculateYCoordinate(linex2, liney));
        	str = numberFormat.format(yRealSeparate*i);//跟其他不一样的地方
        	g2d.drawString(str, caculateXCoordinate(linex1-4, liney), caculateYCoordinate(linex1-4, liney));
        }
	}
	
	private void drawViewObject(){
		g2d.setColor(Color.RED);
		int rowCount = vo.datas.length;
		for(int x=0;x<rowCount;x++){
			int[] row = vo.datas[x];
			int colCount = row.length;
			for(int y=0;y<colCount;y++){
				int value = row[y];
				if(value == 0){
					continue;
				}
				int x1 = caculateXCoordinate(x,y);
				int y1 = caculateYCoordinate(x,y);
				int x2 = x1;
				int y2 = y1 - caculateZCoordinate(value);
				int z = caculateZCoordinate(value);
				
//				g2d.setColor(getColor(LINEBAR_HEIGHT-(int)(value*linebar_scale), LINEBAR_HEIGHT, LINEBARBEGINCOLOR, LINEBARENDCOLOR));
//				g2d.drawLine(x1, y1, x2, y2);
				
				g2d.setColor(Color.BLACK);
				g2d.fillRect(x1+1, y2-1, 2, z);
				g2d.setColor(getColor(LINEBAR_HEIGHT-(int)(value*linebar_scale), LINEBAR_HEIGHT, LINEBARBEGINCOLOR, LINEBARENDCOLOR));
				g2d.fillRect(x1, y2, 2, z);
			}
		}
	}
	
	/**
	 * 计算x坐标
	 * @param xvalue
	 * @return
	 */
	private int caculateXCoordinate(double xvalue){
		return (int)(xvalue * xScale);
	}
	
	/**
	 * 计算x坐标
	 * @param xvalue
	 * @return
	 */
	private int caculateXCoordinate(double xvalue,double yvalue){
		return (int)(xRo(caculateXCoordinate(xvalue),caculateXCoordinate(yvalue)));
	}
	
	/**
	 * 计算y坐标
	 * @param yvalue
	 * @return
	 */
	private int caculateYCoordinate(double yvalue){
		return (int)(yvalue * yScale);
	}
	
	/**
	 * 计算z坐标
	 * @param zvalue
	 * @return
	 */
	private int caculateZCoordinate(double zvalue){
		return (int)(zvalue * zScale);
	}
	
	/**
	 * 计算y坐标
	 * @param yvalue
	 * @return
	 */
	private int caculateYCoordinate(double xvalue,double yvalue){
		return (int)(yRo(caculateXCoordinate(xvalue),caculateYCoordinate(yvalue)));
	}
	
	private static final double cos60 = Math.cos(Math.PI/4);
	private static final double sin60 = Math.sin(Math.PI/4);
	private double xRo(double xvalue,double yvalue){
		return xvalue*cos60+yvalue*sin60;
	}
	private double yRo(double xvalue,double yvalue){
		return -xvalue*sin60+yvalue*cos60;
	}
	
	/**
	 * 释放资源
	 */
	private void release(){
		g2d.dispose();
	}
	
	// 渐变算法
	public void paint(int x, int y, int w, int h, Color colorBegin, Color colorEnd) {
		for (int i = 0; i < h; i++) {
			g2d.setColor(getColor(i,h,colorBegin,colorEnd));
			g2d.drawRect(x, y + i, w - 1, 0);
		}
	}
	
	public Color getColor(int value,int h, Color colorBegin, Color colorEnd ){
		int F = 0;
		int rr = 0;
		int gg = 0;
		int bb = 0;
		
		F = (value << 16) / h;
		rr = colorBegin.getRed() + ((F * (colorEnd.getRed() - colorBegin.getRed())) >> 16);
		gg = colorBegin.getGreen() + ((F * (colorEnd.getGreen() - colorBegin.getGreen())) >> 16);
		bb = colorBegin.getBlue() + ((F * (colorEnd.getBlue() - colorBegin.getBlue())) >> 16);
		
		return new Color(rr,gg,bb);
	}
}
